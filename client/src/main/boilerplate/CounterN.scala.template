package org.lyranthe.prometheus.client.internal.counter

import org.lyranthe.prometheus.client._
import org.lyranthe.prometheus.client.internal._

[#
final case class Counter1(name: String, help: String, labels: List[String]) extends Collector {
  private[client] val adders = new Adders[Tuple1[[#String#]], UnsynchronizedAdder](new UnsynchronizedAdder)

  override final val collectorType = CollectorType.Counter

  def labelValues([#labelValue1: String#]): LabelledCounter =
    new LabelledCounter(name, labels, adders(Tuple1([#labelValue1#])))

  def remove([#labelValue1: String#]): Unit =
    adders.remove(Tuple1([#labelValue1: String#]))

  def clear(): Unit =
    adders.clear()

  override def collect(): List[RegistryMetric] =
    adders.getAll.map({
      case (labelValues, value) =>
        val labelAndValue = labels.zip(labelValues.productIterator.asInstanceOf[Iterator[String]].toIterable)
        RegistryMetric(name, labelAndValue, value)
    })
}#
]
