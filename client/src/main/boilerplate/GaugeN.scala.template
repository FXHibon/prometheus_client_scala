package org.lyranthe.prometheus.client.internal.gauge

import org.lyranthe.prometheus.client._

[#
final class Gauge1(val name: String, val help: String, initialValue: Option[Double] = None)(val labels: List[String]) extends Collector {
  private[client] val adders = new Adders[Tuple1[[#String#]], SynchronizedAdder](new SynchronizedAdder)

  def labelValues([#labelValue1: String#]): LabelledGauge =
    new LabelledGauge(name, labels, adders(Tuple1([#labelValue1#])))

  def remove([#labelValue1: String#]): Unit =
    adders.remove(Tuple1([#labelValue1: String#]))

  def clear(): Unit =
    adders.clear()

  override def collect(): List[RegistryMetric] =
    adders.getAll.map({
      case (labelValues, value) =>
        val labelAndValue = labels.zip(labelValues.productIterator.asInstanceOf[Iterator[String]].toIterable)
        RegistryMetric(name, labelAndValue, value)
    })

  override def toString(): String =
    s"Gauge1($name)(${labels.mkString(",")})"
}#
]
