package org.lyranthe.prometheus.client.internal.histogram

import org.lyranthe.prometheus.client._
import org.lyranthe.prometheus.client.internal._

[#
private[client] final case class Histogram1(name: String, help: String, labels: List[String], buckets: List[(Double, Int)]) extends NamedCollector {
  private[client] val adders = new BucketedAdders[Tuple1[[#String#]], UnsynchronizedAdder](new UnsynchronizedAdder, buckets.size + 1, None)

  override final val collectorType = CollectorType.Histogram

  def labelValues([#labelValue1: String#]): LabelledHistogram =
    new LabelledHistogram(name, labels, adders(Tuple1([#labelValue1#])), buckets)

  def remove([#labelValue1: String#]): Unit =
    adders.remove(Tuple1([#labelValue1: String#]))

  def clear(): Unit =
    adders.clear()

  override def collect(): List[RegistryMetric] =
    adders.getAll.flatMap({
      case (labelValues, value) =>
        val labelsAndValues = labels.zip(labelValues.productIterator.asInstanceOf[Iterator[String]].toIterable)
        RegistryMetric(Some("total"), labelsAndValues, value.last) ::
          RegistryMetric(Some("sum"), labelsAndValues, value(value.length - 2)) ::
          buckets.map { case (bucket, idx) =>
            RegistryMetric(Some("bucket"), ("le" -> HistogramBuckets.prometheusDoubleFormat(bucket)) :: labelsAndValues, value(idx))
          }
    })
}#
]
