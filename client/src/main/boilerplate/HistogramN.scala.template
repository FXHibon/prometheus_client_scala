package org.lyranthe.prometheus.client.internal.histogram

import org.lyranthe.prometheus.client._

[#
final class Histogram1(val name: String, val help: String)(val labels: List[String])(implicit hb: HistogramBuckets) extends Collector {
  val buckets = hb.buckets.zipWithIndex

  private[client] val adders = new BucketedAdders[Tuple1[[#String#]], UnsynchronizedAdder](new UnsynchronizedAdder, buckets.size + 1, None)

  def collectorType: String = "histogram"

  def labelValues([#labelValue1: String#]): LabelledHistogram =
    new LabelledHistogram(name, labels, adders(Tuple1([#labelValue1#])))

  def remove([#labelValue1: String#]): Unit =
    adders.remove(Tuple1([#labelValue1: String#]))

  def clear(): Unit =
    adders.clear()

  override def collect(): List[RegistryMetric] =
    adders.getAll.flatMap({
      case (labelValues, value) =>
        val labelsAndValues = labels.zip(labelValues.productIterator.asInstanceOf[Iterator[String]].toIterable)
        RegistryMetric(s"${name}_total" , labelsAndValues, value.last) ::
          RegistryMetric(s"${name}_sum", labelsAndValues, value(value.length - 2)) ::
          buckets.map { case (bucket, idx) =>
            RegistryMetric(s"${name}_bucket", ("le" -> HistogramBuckets.prometheusDoubleFormat(bucket)) :: labelsAndValues, value(idx))
          }
    })

  override def toString(): String =
    s"Histogram1($name, ${buckets.map(_._##1)})(${labels.mkString(",")})"
}#
]
