package io.prometheus.client.scala

import io.prometheus.client.scala.internal.counter._
import io.prometheus.client.scala.internal.gauge._
import io.prometheus.client.scala.internal.histogram._
import fs2.util.Suspendable
import fs2.util.syntax._

object to_fs2_syntax {
  implicit class CounterSyntax0[N <: String](val a: Counter0[N]) extends AnyVal {
    def countStream[F[_], A](f: fs2.Chunk[A] => Double): fs2.Sink[F, A] =
      _.chunks.map(chunk => a.incBy(f(chunk)))
  }

  implicit class GaugeTimeSyntax0[N <: String](val a: Gauge0[N]) extends AnyVal {
    def timeEffect[F[_], A](t: F[A])(implicit F: Suspendable[F]): F[A] = {
      F.delay(System.nanoTime).flatMap { startTime =>
        t.map { result =>
          a.set((System.nanoTime() - startTime) / 1e9)
          result
        }
      }
    }
  }

[#
  implicit class GaugeTimeSyntax1[N <: String, [#L1 <: String#]](val a: Gauge1[N, [#L1#]]) extends AnyVal {
    def timeEffect[F[_], A]([#l1: String#])(t: F[A])(implicit F: Suspendable[F]): F[A] = {
      F.delay(System.nanoTime).flatMap { startTime =>
        t.map { result =>
          a.set([#l1#])((System.nanoTime() - startTime) / ##1e9)
          result
        }
      }
    }
  }

  implicit class HistogramTimeSyntax1[N <: String, [#L1 <: String#]](val a: Histogram1[N, [#L1#]]) extends AnyVal {
    def timeEffect[F[_], A]([#l1: String#])(t: F[A])(implicit F: Suspendable[F]): F[A] = {
      F.delay(System.nanoTime).flatMap { startTime =>
        t.map { result =>
          a.observe([#l1#])((System.nanoTime() - startTime) / ##1e9)
          result
        }
      }
    }
  }#
]

  implicit class HistogramTimeSyntax0[N <: String](val a: Histogram0[N]) extends AnyVal {
    def timeEffect[F[_], A](t: F[A])(implicit F: Suspendable[F]): F[A] = {
      F.delay(System.nanoTime).flatMap { startTime =>
        t.map { result =>
          a.observe((System.nanoTime() - startTime) / 1e9)
          result
        }
      }
    }
  }
}
