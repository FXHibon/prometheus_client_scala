package org.lyranthe.prometheus.client.scala.internal.counter

import org.lyranthe.prometheus.client.scala._

[#
final class Counter1(val name: String, val help: String)(val labels: List[String]) extends Collector {
  private[scala] val adders = new Adders[Tuple1[[#String#]], UnsynchronizedAdder](new UnsynchronizedAdder)

  def labelValues([#labelValue1: String#]): LabelledCounter =
    new LabelledCounter(name, labels, adders(Tuple1([#labelValue1#])))

  override def collect(): List[RegistryMetric] =
    adders.getAll.map({
      case (labelValues, value) =>
        val labelAndValue = labels.zip(labelValues.productIterator.asInstanceOf[Iterator[String]].toIterable)
        RegistryMetric(name, labelAndValue, value)
    })

  override def toString(): String =
    s"Counter1($name)(${labels.mkString(",")})"
}#
]
