package io.prometheus.client.scala.internal.counter

import io.prometheus.client.scala._

[#
/** This represents a Prometheus counter with 2 labels.
  *
  * A Prometheus counter should be used for values which only increase in value.
  *
  * @param name The name of the counter
  */
final class Counter1(val name: String)(val labels: List[String]) extends Collector {
  private[scala] val adders = new Adders[Tuple1[[#String#]], UnsynchronizedAdder](new UnsynchronizedAdder)

  def incBy([#labelValue1: String#])(v: Double): Unit = {
    assert(v >= ##0d)
    adders(Tuple1([#labelValue1#])).add(v)
  }

  def inc([#labelValue1: String#]): Unit =
    adders(Tuple1([#labelValue1#])).add(##1d)

  override def collect(): List[RegistryMetric] =
    adders.getAll.map({
      case (labelValues, value) =>
        val labelAndValue = labels.zip(labelValues.productIterator.asInstanceOf[Iterator[String]].toIterable)
        RegistryMetric(name, labelAndValue, value)
    })

  override def toString(): String =
    s"Counter1($name)(${labels.mkString(",")})"
}#
]
