package io.prometheus.client.scala.internal.histogram

import io.prometheus.client.scala._

[#
/** This represents a Prometheus histogram with 2 labels.
  *
  * @param name The name of the histogram
  */
final class Histogram1(val name: String)(val labels: List[String])(implicit hb: HistogramBuckets) extends Collector {
  val buckets = hb.buckets.zipWithIndex

  private[scala] val adders = new BucketedAdders[Tuple1[[#String#]], UnsynchronizedAdder](new UnsynchronizedAdder, buckets.size + 1, None)

  def observe([#labelValue1: String#])(v: Double): Unit =
    Histogram.observe(buckets, adders(Tuple1([#labelValue1#])), v)

  override def collect(): List[RegistryMetric] =
    adders.getAll.flatMap({
      case (labelValues, value) =>
        val labelsAndValues = labels.zip(labelValues.productIterator.asInstanceOf[Iterator[String]].toIterable)
        RegistryMetric(s"${name}_total" , labelsAndValues, value.last) ::
          RegistryMetric(s"${name}_sum", labelsAndValues, value(value.length - 2)) ::
          buckets.map { case (bucket, idx) =>
            RegistryMetric(s"${name}_bucket", ("le" -> HistogramBuckets.prometheusDoubleFormat(bucket)) :: labelsAndValues, value(idx))
          }
    })

  override def toString(): String =
    s"Histogram1($name, ${buckets.map(_._##1)})(${labels.mkString(",")})"
}#
]
