package io.prometheus.client.scala.internal.gauge

import io.prometheus.client.scala._

case class AddDouble(adder: Adder) {
  def apply(v: Double): Unit =
    adder.add(v)
}

[#
/** This represents a Prometheus gauge with 2 labels.
  *
  * A Prometheus gauge should be used for values which go up and down.
  *
  * @param name The name of the gauge
  * @tparam N The singleton type for the gauge's name
  * @tparam L##1 The singleton string type for label ##1
[#  * @tparam L2 The singleton string type for label 2#
]
  */
final class Gauge1(val name: String, val help: String, initialValue: Option[Double] = None)(val labels: List[String]) extends Collector {
  private[scala] val adders = new Adders[Tuple1[[#String#]], SynchronizedAdder](new SynchronizedAdder)

  def labelValues([#labelValue1: String#]): LabelledGauge =
    new LabelledGauge(name, labels, adders(Tuple1([#labelValue1#])))

  override def collect(): List[RegistryMetric] =
    adders.getAll.map({
      case (labelValues, value) =>
        val labelAndValue = labels.zip(labelValues.productIterator.asInstanceOf[Iterator[String]].toIterable)
        RegistryMetric(name, labelAndValue, value)
    })

  override def toString(): String =
    s"Gauge1($name)(${labels.mkString(",")})"
}#
]
